#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    vector<int>arr;
    LinkedListNode<int> *curr = head;
    
    if(head==NULL || head->next==NULL)
        return head;
    
    while(curr!=NULL && curr->next!=NULL){
        arr.push_back(curr->data);
        curr=curr->next;
    }
    arr.push_back(curr->data);
    
    reverse(arr.begin(),arr.end());
    LinkedListNode<int> *re = head;
    int i=0;
    while(re!=NULL && re->next!=NULL){
        re->data = arr[i];
        i++;
        re=re->next;
    }
    re->data = arr[arr.size()-1];
        
    return head;
    
}
///////////////////////////////////////////////////////////OPTIMAL SOLUTION////////////////////////////////////////
#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    LinkedListNode<int> *prev = NULL;
    LinkedListNode<int> *curr = head;
    LinkedListNode<int> *naxt ;
    
    while(curr){
        naxt = curr->next;
        curr->next = prev;
        prev = curr;
        curr = naxt;
    }
    head=prev;
    
    return head;
    
}
