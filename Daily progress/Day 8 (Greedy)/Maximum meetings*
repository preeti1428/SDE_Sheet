#include<bits/stdc++.h>

struct meeting{
    int start;
    int end;
    int pos;
};

bool comparator(struct meeting m1,meeting m2){
    if(m1.end<m2.end) return true;
    else if(m1.end>m2.end) return false;
    else if(m1.pos<m2.pos) return true;
    else return false;
}

vector<int> maximumMeetings(vector<int> &s, vector<int> &e) {
    int n=s.size();
    struct meeting meet[n];
    for(int i=0;i<n;i++){
        meet[i].start=s[i],meet[i].end=e[i],meet[i].pos=i+1;
    }
    sort(meet,meet+n,comparator);
    vector<int> ans;
    int ending=meet[0].end;
   
    ans.push_back(meet[0].pos);
  
    for(int i=1;i<n;i++){
        if(meet[i].start>ending){
            ending=meet[i].end;
            ans.push_back(meet[i].pos);
        }
    }
    return ans;
}

///////////////////////////////////////////////////////////////////////////////////
#include<bits/stdc++.h>

bool mycmp(pair<int,int>a , pair<int,int>b){
    return a.second<b.second;
}
vector<int> maximumMeetings(vector<int> &start, vector<int> &end) {
   map<pair<int,int>,int>mp;
    vector<pair<int,int>>act;
    for(int i=0;i<start.size();i++)
        act.push_back({start[i],end[i]});
    
    for(int i=0; i<start.size();i++)
        mp[act[i]]=i+1;
    
    sort(act.begin(),act.end(),mycmp);
    vector<int>answer;
    answer.push_back(mp[act[0]]);
    
    int res = 1;
    int prev = 0;
    
    for(int i=1; i<start.size();i++){
        if(act[i].first>act[prev].second){
            res++;
            prev=i;
            answer.push_back(mp[act[i]]);
        }
    }
    return answer;
}
