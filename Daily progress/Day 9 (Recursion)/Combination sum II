#include<bits/stdc++.h>


void solve(vector<vector<int>>&ans, vector<int>temp, vector<int>arr, int target, int sum){
    if(arr.size()==0){
        
        if(sum==target){
            sort(temp.begin(),temp.end());
            ans.push_back(temp);
        }
         return;
    }
    
    vector<int>vec1(temp.begin(),temp.end());
    vector<int>vec2(temp.begin(),temp.end());
    int sum1 = sum;
    int sum2 = sum;
    
    vec2.push_back(arr[arr.size()-1]);
    sum2+= arr[arr.size()-1];
    
    arr.pop_back();
    
    solve(ans,vec1,arr,target,sum1);
    solve(ans,vec2, arr, target,sum2);
    
}
vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
	vector<vector<int>>ans;
    vector<int>temp;
    int sum=0;
    
    solve(ans,temp,arr,target,sum);
    
    set<vector<int>>s;
    
    for(int i=0; i<ans.size();i++)
        s.insert(ans[i]);
   
    vector<vector<int>>fin;
    for(auto it= s.begin(); it!=s.end();it++)
        fin.push_back(*it);
    
    return fin;
}

///////////////////////////////////////////////////////EFFICIENT SOLUTION/////////////////////////////////////////////////////////////////
Without use of set

#include <bits/stdc++.h>

void func(int index,int target,vector<int>&arr,int n,vector<int>&temp,vector<vector<int>>&ans){
    if(target==0){
        ans.push_back(temp);
        return ;
    }
    for(int i=index;i<n;i++){
        if(i>index && arr[i]==arr[i-1]){
            continue;
        }
        if(arr[i]>target){
            break;
        }
        temp.push_back(arr[i]);
        func(i+1,target-arr[i],arr,n,temp,ans);
        temp.pop_back();
    }
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target)
{
	sort(arr.begin(),arr.end());
    vector<vector<int>>ans;
    vector<int>temp;
    func(0,target,arr,n,temp,ans);
    return ans;
}
