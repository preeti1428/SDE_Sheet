//Based on Merge Sort

#include <bits/stdc++.h>
long long merge(long long *arr, long long l, long long m, long long r){
    long long n1 = m-l+1;
    long long n2 = r-m;
    long long left[n1];
    long long right[n2];
    
    for(int i=0; i<n1;i++)
        left[i]=arr[l+i];
    for(int i=0; i<n2;i++)
        right[i]= arr[m+1+i];
    
    long long res=0, i=0, j=0, k=l;
    
    while(i<n1 && j<n2){
        if(left[i]<=right[j]){
            arr[k]=left[i];
            i++;
        }
        else{
            arr[k]=right[j];
            res+=(n1-i);
            j++;
        }
        k++;
    }
        while(i<n1){
            arr[k]=left[i];
            i++, k++;
        }
        while(j<n2){
            arr[k]=right[j];
            j++,k++;
        }
            
    return res;
}
long long aslifun(long long *arr, long long l, long long r){
    long long res =0;
    
    if(l<r){
       long long m = l+(r-l)/2;
       
       res+=aslifun(arr,l,m);
       res+=aslifun(arr, m+1,r);
       res+=merge(arr,l,m,r);
   }
    return res;
}


long long getInversions(long long *arr, int n){
   long long res =0;
   long long l=0;
    long long r = n-1;
    
    res = aslifun(arr, l,r);
    
    return res;
}
   
